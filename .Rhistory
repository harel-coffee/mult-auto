plot(1:100, log(1:100))
plot(1:100, log(-1:100))
plot(1:100, log(-1:-100))
plot(1:100, log(1:100))
plot(0:100, log(0:100))
max(log(0:100))
max(log(0:200))
max(log(0:300))
max(log(0:1000))
plot(0:100, sigmoid(log(0:100)))
plot(0:100, sigmoid(log(0:100)))
require('sigmoid')
install.packages('sigmoid')
require('sigmoid')
plot(0:100, sigmoid(log(0:100)))
plot(0:100, sigmoid(log(0:100000)))
plot(0:100000, sigmoid(log(0:100000)))
sigmoid(100)
sigmoid(101)
sigmoid(4)
sigmoid(5)
sigmoid(.1)
sigmoid(.01)
sigmoid(.001)
sigmoid(.0001)
sigmoid(.0000001)
sigmoid(.000000000000001)
sigmoid(-1)
sigmoid(-2)
sigmoid(0)
sigmoid(-100)
sigmoid(-100000)
plot(-1000:1000, sigmoid(-1000:1000))
plot(-1000:1000, sigmoid(-100:100))
plot(-100:100, sigmoid(-100:100))
plot(-100:100, sigmoid(-100:100, SoftMax = T))
plot(0:100, sigmoid(0:100, SoftMax = T))
plot(100:200, sigmoid(100:200, SoftMax = T))
plot(100:200, sigmoid(100:200, SoftMax = T))
plot(0:100, sigmoid(0:100, SoftMax = T))
plot(0:100, sigmoid(0:100))
plot(0:100, sigmoid(0:100, inverse = T))
x = c(1, 2, 3)
y = c(50, 35, 40)
(y - mean(x)) / sd(x)
(x - mean(x)) / sd(x)
plot(0:100, sigmoid(0:100))
plot(0:100, sigmoid(5*0:100))
plot(0:100, sigmoid(-5*0:100))
plot(0:100, sigmoid(.5*0:100))
plot(0:100, sigmoid(.25*0:100))
plot(0:100, sigmoid(.025*0:100))
plot(0:100, sigmoid(.0025*0:100))
plot(0:100, sigmoid(.75*0:100))
plot(0:100, sigmoid(log(0:100 + 1)))
plot(0:100, sigmoid(log(1 /0:100)))
plot(0:100, sigmoid(log10(0:100)))
plot(0:10, sigmoid(log10(0:10)))
plot(0:10, sigmoid(log(0:10)))
plot(0:10, sigmoid(sqrt(0:10)))
plot(0:10, sigmoid(1(0:10)))
plot(0:10, sigmoid(1/(0:10)))
a = c(1,2,3,2,1,5)
mean(a) / sum(a)
a = c(.1,.9,.3,.2,.1,.5)
mean(a) / sum(a)
(mean(a) + sd(a)) / sum(a)
1 - (mean(a) + sd(a)) / sum(a)
a = c(.1,.1,.3,.2,.1,.5)
1 - (mean(a) + sd(a)) / sum(a)
a = c(.1,.1,.1,.1,.1,.1)
1 - (mean(a) + sd(a)) / sum(a)
sd(c(320,100,0,0,0,0,0))
sd(c(120,100,100,100,0,0,0))
install.packages("devtools")
devtools::install_github("IRkernel/IRkernel")
devtools::install_github("IRkernel/IRkernel")
devtools::install_github("IRkernel/IRkernel")
remove.packages('digest')
install.packages('digest')
install.packages("digest")
install.packages("digest")
devtools::install_github("IRkernel/IRkernel")
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
devtools::install_github("IRkernel/IRkernel")
install.packages("rlang")
install.packages("rlang")
devtools::install_github("IRkernel/IRkernel")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
devtools::install_github("IRkernel/IRkernel")
citation(kruskal.test)
citation("kruskal.test")
cite("kruskal.test")
cite(kruskal.test)
help(kruskal.test)
install.packages(c("backports", "BH", "callr", "cli", "cluster", "covr", "cowplot", "crosstalk", "devtools", "dplyr", "DT", "ellipsis", "fansi", "foreach", "fs", "geepack", "ggplot2", "git2r", "glmnet", "glue", "htmltools", "httpuv", "httr", "IRkernel", "iterators", "jsonlite", "kinship2", "knitr", "later", "MASS", "mvtnorm", "openssl", "pillar", "pkgbuild", "pkgconfig", "pkgload", "plyr", "pROC", "processx", "promises", "ps", "purrr", "quadprog", "R6", "Rcpp", "RcppArmadillo", "remotes", "reshape2", "rex", "rlang", "rmarkdown", "roxygen2", "rversions", "scales", "shiny", "stringi", "tibble", "tidyselect", "tinytex", "usethis", "vctrs", "withr", "xfun", "xml2", "zoo"))
require(ggplot2)
decay <- function(step, rate, initial) {
(1 / (1 + rate * step)) * intial
}
plot(1:1000, decay(1:1000))
plot(1:1000, decay(1:1000, 1, .2))
decay <- function(step, rate, initial) {
(1 / (1 + rate * step)) * initial
}
plot(1:1000, decay(1:1000, 1, 0.2))
decay <- function(step, rate, initial) {
(1 / (1 + rate * step)) * initial
}
plot(1:1000, decay(1:1000, .5, 0.2))
plot(1:1000, decay(1:1000, .25, 0.2))
decay <- function(step, rate, initial) {
(1 / (1 + rate * step)) * initial
}
plot(1:1000, decay(1:1000, .15, 0.2))
decay <- function(step, rate, initial) {
(1 / (1 + rate * step)) * initial
}
plot(1:1000, decay(1:1000, .25, 0.2))
decay <- function(step, rate, initial) {
(1 / (1 + rate * step)) * initial
}
plot(1:1000, decay(1:1000, .5, 0.2))
decay <- function(step, rate, initial) {
(1 / (1 + rate * step)) * initial
}
plot(1:1000, decay(1:1000, 1, 0.2))
decay <- function(step, rate, initial) {
(1 / (1 + rate * step)) * initial
}
plot(1:1000, decay(1:1000, 1, 0.2))
decay(1:1000, 1, 0.2)
m
df = read.csv('output/entropy_x_n_genes.csv', sep=',')
m <- lm(n_genes ~ mean + std + min + max + X0.25 + X0.5 + X0.75 + total + sum, data = df)
round(predict(m, newdata=df), digits = 1)
df$n_genes
m
setwd("C:/Users/Venezian/git/multiple-myeloma")
df = read.csv('output/entropy_x_n_genes.csv', sep=',')
m <- lm(n_genes ~ mean + std + min + max + X0.25 + X0.5 + X0.75 + total + sum, data = df)
round(predict(m, newdata=df), digits = 1)
df$n_genes
m
df = read.csv('output/entropy_x_n_genes.csv', sep=',')
m <- lm(n_genes ~ mean + std + min + max + X0.25 + X0.5 + X0.75 + total, data = df)
round(predict(m, newdata=df), digits = 1)
df$n_genes
m
df = read.csv('output/entropy_x_n_genes.csv', sep=',')
m <- lm(n_genes ~ mean + std + min + max + X0.25 + X0.5 + X0.75 + total + sum, data = df)
round(predict(m, newdata=df), digits = 1)
df$n_genes
m
df = read.csv('output/entropy_x_n_genes.csv', sep=',')
m <- lm(n_genes ~ mean + std + min + max + X0.25 + X0.5 + X0.75 + total, data = df)
round(predict(m, newdata=df), digits = 1)
df$n_genes
m
df = read.csv('output/entropy_x_n_genes.csv', sep=',')
m <- lm(n_genes ~ mean + std + min + max + X0.25 + X0.5 + X0.75 + total + sum, data = df)
round(predict(m, newdata=df), digits = 1)
df$n_genes
m
df = read.csv('output/entropy_x_n_genes.csv', sep=',')
m <- lm(n_genes ~ mean + std + min + max , data = df)
round(predict(m, newdata=df), digits = 1)
df$n_genes
m
df = read.csv('output/entropy_x_n_genes.csv', sep=',')
m <- lm(n_genes ~ mean + std + min + max + X0.5, data = df)
round(predict(m, newdata=df), digits = 1)
df$n_genes
m
df = read.csv('output/entropy_x_n_genes.csv', sep=',')
m <- lm(n_genes ~ mean + std + min + max + X0.25 + X0.5 + X0.75 + total + sum, data = df)
round(predict(m, newdata=df), digits = 1)
df$n_genes
m
m$coefficients
c = m$coefficients
(c - min(c)) / (max(c) - min(c))
df = read.csv('output/entropy_x_n_genes_p.csv', sep=',')
m <- lm(n_genes_p ~ mean + std + min + max + X0.25 + X0.5 + X0.75 + total + sum, data = df)
round(predict(m, newdata=df), digits = 1)
df$n_genes
m
df = read.csv('output/entropy_x_n_genes_p.csv', sep=',')
m <- lm(n_genes_p ~ mean + std + min + max + X0.25 + X0.5 + X0.75 + total + sum, data = df)
round(predict(m, newdata=df), digits = 1)
df$n_genes_p
m
df = read.csv('output/entropy_x_n_genes_p.csv', sep=',')
m <- lm(n_genes_p ~ mean + std + min + max + X0.25 + X0.5 + X0.75 + total + sum, data = df)
predict(m, newdata=df)
df$n_genes_p
m
df = read.csv('output/entropy_x_n_genes_p.csv', sep=',')
m <- lm(n_genes_p ~ mean + std + min + max, data = df)
predict(m, newdata=df)
df$n_genes_p
m
df = read.csv('output/entropy_x_n_genes_p.csv', sep=',')
m <- lm(n_genes_p ~ mean + std + min + max, data = df)
roun(df$n_genes_p * predict(m, newdata=df), digits=0)
df$n_genes
m
df = read.csv('output/entropy_x_n_genes_p.csv', sep=',')
m <- lm(n_genes_p ~ mean + std + min + max, data = df)
round(df$n_genes_p * predict(m, newdata=df), digits=0)
df$n_genes
m
df = read.csv('output/entropy_x_n_genes_p.csv', sep=',')
m <- lm(n_genes_p ~ mean + std + min + max, data = df)
round(df$total * predict(m, newdata=df), digits=0)
df$n_genes
m
df = read.csv('output/entropy_x_n_genes_p.csv', sep=',')
m <- lm(n_genes_p ~ mean + std + sum, data = df)
round(df$total * predict(m, newdata=df), digits=0)
df$n_genes
m
df = read.csv('output/entropy_x_n_genes_p.csv', sep=',')
m <- lm(n_genes_p ~ mean + std + X0.25 + X0.5 + X0.75 + total + sum, data = df)
round(df$total * predict(m, newdata=df), digits=0)
df$n_genes
m
df = read.csv('output/entropy_x_n_genes_p.csv', sep=',')
m <- lm(n_genes_p ~ mean + std + X0.25 + X0.5 + X0.75 + total + sum, data = df)
as.integer(df$total * predict(m, newdata=df), digits=0)
df$n_genes
m
df = read.csv('output/entropy_x_n_genes_p.csv', sep=',')
m <- lm(n_genes_p ~ mean + std + min + max + X0.25 + X0.5 + X0.75 + total + sum, data = df)
as.integer(df$total * predict(m, newdata=df), digits=0)
df$n_genes
m
df = read.csv('output/entropy_x_n_genes_p.csv', sep=',')
m <- lm(n_genes_p ~ mean + std + min + max + X0.25 + X0.5 + X0.75 + total + sum, data = df)
round(df$total * predict(m, newdata=df), digits=0)
df$n_genes
m
round(df$total * predict(m, newdata=df[0:7,]), digits=0)
df = read.csv('output/entropy_x_n_genes_p.csv', sep=',')
m <- lm(n_genes_p ~ mean + std + min + max + X0.25 + X0.5 + X0.75 + total + sum, data = df)
round(df[0:7,]$total * predict(m, newdata=df[0:7,]), digits=0)
df$n_genes
m
df = read.csv('output/entropy_x_n_genes_p.csv', sep=',')
m <- lm(n_genes_p ~ mean + std + min + max + X0.25 + X0.5 + X0.75 + total + sum, data = df[0:7,])
round(df[7:10,]$total * predict(m, newdata=df[7:10,]), digits=0)
df$n_genes
m
df = read.csv('output/entropy_x_n_genes_p.csv', sep=',')
m <- lm(n_genes_p ~ mean + std + min + max + X0.25 + X0.5 + X0.75 + total + sum, data = df[0:7,])
round(df[7:9,]$total * predict(m, newdata=df[7:9,]), digits=0)
df$n_genes
m
df[7:9,]
lm(n_genes_p ~ mean + std + min + max + X0.25 + X0.5 + X0.75 + total + sum, data = df[0:7,])
predict(m, newdata=df[7:9,])
df = read.csv('output/entropy_x_n_genes_p.csv', sep=',')
m <- lm(n_genes_p ~ mean + std + min + max + X0.25 + X0.5 + X0.75 + total + sum, data = df[0:8,])
round(df[7:9,]$total * predict(m, newdata=df[7:9,]), digits=0)
df$n_genes
m
df = read.csv('output/entropy_x_n_genes_p.csv', sep=',')
m <- lm(n_genes_p ~ mean + std + min + max + X0.25 + X0.5 + X0.75 + total + sum, data = df)
round(df$total * predict(m, newdata=df), digits=0)
df$n_genes
m
df = read.csv('output/entropy_x_n_genes_p.csv', sep=',')
m <- lm(n_genes_p ~ mean + std + min + max + X0.25 + X0.5 + X0.75 + total + sum, data = df)
round(df$total * predict(m, newdata=df), digits=0)
df$n_genes
m
df = read.csv('output/entropy_x_n_genes_p.csv', sep=',')
m <- lm(n_genes_p ~ mean + std + min + max + X0.25 + X0.5 + X0.75 + total + sum, data = df)
round(df$total * predict(m, newdata=df), digits=0)
df$n_genes
m
View(df)
df = read.csv('output/entropy_x_n_genes_p.csv', sep=',')
m <- lm(n_genes ~ mean + std + min + max + X0.25 + X0.5 + X0.75 + total + sum, data = df)
round(df$total * predict(m, newdata=df), digits=0)
df$n_genes
m
round(predict(m, newdata=df), digits=0)
View(df)
df = read.csv('output/entropy_x_n_genes_p.csv', sep=',')
m <- lm(n_genes_p ~ mean + std + min + max + X0.25 + X0.5 + X0.75 + total + sum, data = df)
round(predict(m, newdata=df), digits=0)
df$n_genes
m
df = read.csv('output/entropy_x_n_genes_p.csv', sep=',')
m <- lm(n_genes_p ~ mean + std + min + max + X0.25 + X0.5 + X0.75 + total + sum, data = df)
View(df)
m <- lm(n_genes_p ~ mean + std + amin + amax + X0.25 + X0.5 + X0.75 + total + sum, data = df)
round(predict(m, newdata=df), digits=0)
df$n_genes
df$n_genes
round(df$total * predict(m, newdata=df), digits=0)
df$n_genes
View(df)
predict(m, newdata=df)
m
round(df$total * predict(m, newdata=df), digits=0)
df = read.csv('output/entropy_x_n_genes_p.csv', sep=',')
m <- lm(n_genes_p ~ mean + std + amin + amax + X0.25 + X0.5 + X0.75 + total + sum, data = df)
round(df$total * predict(m, newdata=df), digits=0)
df$n_genes
m
df = read.csv('output/entropy_x_n_genes_p.csv', sep=',')
m <- lm(n_genes_p ~ mean + std + amin + amax + X0.25 + X0.5 + X0.75 + total + sum, data = df)
round(df$total * predict(m, newdata=df), digits=0)
df$n_genes
m
